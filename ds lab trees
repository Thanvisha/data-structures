#include<stdio.h>
//creation of a tree
struct node{
    int data;
    struct node *left;
    struct node *right;
};
int main(){
    struct node*root;
    root=0;
    root=makenode();
}
struct node*makenode(){
    struct node*nnode;
    nnode=(struct node*)malloc(sizeof(struct node));
    int ch;
    printf("enter data and enter -1 to stop");
    scanf("%d",&ch);
    if(ch==-1){
        return 0;
    }
    else{
        nnode->data=ch;
        printf("enter left child of %d",ch);
        nnode->left=makenode();
        printf("enter right child of%d",ch);
        nnode->right=makenode();
        return nnode;
    }
}
//insertion into a binary search tree
int data;
struct node*prev;
void insert(struct node*root,data){
    while(root!=NULL){
        prev=root;
        if(data==root->data){
            return;
            printf("data already exists in tree");
        }
        else if(data<root->data){
            root=root->left;
        }
        else{
            root=root->right;
        }
    }
    struct node* new=nnode(data);
    if(data<prev->data){
        prev->left=new;
    }
    else{
        prev->right=new;
    }
}

//function for preorder,inorder and postorder traversals
struct node*preorder(struct node*root){
    printf("%d",root->data);
    preorder(root->left);
    preorder(root->right);
}
struct node*inorder(struct node*root){
    inorder(root->left);
    printf("%d",root->data);
    inorder(root->right);
}
struct node*postorder(struct node*root){
    postorder(root->left);
    postorder(root->right);
    printf("%d",root->data);
}

//function to find height of tree
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

int height(struct Node* root) {
    if (root == NULL)
        return -1;

    int lHeight = height(root->left);
    int rHeight = height(root->right);

    return (lHeight > rHeight ? lHeight : rHeight) + 1;
}

struct Node* nnode(int val) {
    struct Node* nnode 
      		= (struct Node*)malloc(sizeof(struct Node));
    nnode->data = val;
    nnode->left = NULL;
    nnode->right = NULL;
    return nnode;
}

int main() {
    struct Node* root = createNode(12);
    root->left = createNode(8);
    root->right = createNode(18);
    root->left->left = createNode(5);
    root->left->right = createNode(11);
    
    printf("%d\n", height(root));
    
    return 0;
}

//function to find depth of tree

struct node{
    int data;
    struct node*left;
    struct node*right;
};

int depth(struct node*node){
    if(node==NULL){
        return 0;
    }
    else{
        int ldepth,rdepth;
        ldepth=depth(node->left);
        rdepth=depth(node->right);
        if(ldepth>rdepth){
            return ldepth+1;
        }
        else(ldepth<rdepth){
            return rdepth+1;
        }
    }

}
//to count no of leaf bodes in a binary tree
int countleaf_nodes(struct node*root){
    if(root=NULL){
        return 0;
    }
    else if(root->left==NULL&& root->right==NULL){
        return 1;
    }
    else{
        return countleaf_nodes(root->left)+countleaf_nodes(root->right);
    }
}
