//1st question
//quick sort and merge sort
#include<stdio.h>
//quick sort
int swap(int a,int b){
    int temp;
    temp=a;
    a=b;
    b=temp;
}
int quick_sort(int *A,int n){
    int A[n];
    int si=0;
    int ei=n-1;
    int pivot=A[0];
    while(si<ei){
        while(A[si]<pivot){
            si++;
        }
        while(A[ei]>pivot){
            ei--;
        }
        swap(si,ei);
    }
    while(si>ei){
        swap(pivot,ei);
    }

}

int main(){
    int n,i,A[n];
    printf("enter the size n");
    scanf("%d",&n);
    printf("enter the elements");
    for(i=0;i<n;i++){
        scanf("%d",&A[i]);
        printf("%d",A[i]);
    }
    quick_sort(A,n);
    for(i=0;i<n;i++){
        printf("%d",A[i]);
    }
    return 0;
}
//merge sort
#include<stdio.h>
merge( int *A,int mid,int low,int high){
    int i,j,k,B[100];
    i=low;
    j=mid+1;
    k=high;
    while(i<=mid && j<=high){
        if(A[i]<A[j]){
            B[k]=A[i];
            i++;
            k++;
        }
        else{
            B[k]=A[j];
            j++;
            k++;
        }
    }
    while(i<=mid){
        B[k]=A[i];
        i++;
        k++;
    }
    while(j<=k){
        B[k]=A[j];
        j++;
        k++;
    }
    for(i=low;i<=high;i++){
        A[i]=B[i];
    }
}
void mergesort(int A[],int low,int high){
    int mid;
    if(low<high){
        mid=(low+high)/2;
        mergesort(A,low,mid);
        mergesort(A,mid+1,high);
        merge(A,mid,low,high);
    }
}
int main(){
    int n,i,A[n];
    printf("enter the size n");
    scanf("%d",&n);
    printf("enter the elements");
    for(i=0;i<n;i++){
        scanf("%d",&A[i]);
        printf("%d",A[i]);
    }
    mergesort(A,0,n);
    for(i=0;i<n;i++){
        printf("%d",A[i]);
    }
    return 0;
}
//2nd question
//reverse the subarray of user input array
void reverse(int A[],int a,int b){
    int si=a;
    int ei=b;
    int i,j,temp;
    for(i=si,j=ei;i<j;i++,j--){
        temp=A[i];
        A[i]=A[j];
        A[j]=temp;
    }

}
int main(){
    int n,i,A[n];
    printf("enter the size n");
    scanf("%d",&n);
    printf("enter the elements");
    for(i=0;i<n;i++){
        scanf("%d",&A[i]);
        printf("%d",A[i]);
    }
    int a,b;
    printf("enter the starting index a :");
    scanf("%d",&a);
    printf("enter the ending index b :");
    scanf("%d",&b);
    reverse(A,a,b);
    for(i=0;i<n;i++){
        printf("%d",A[i]);
    }
    return 0;
}
//3rd question
//reverse the linked list
struct node{
    int data;
    struct node *next;
};
void reverse(){
    struct node*head,*prevnode,*currentnode,*nextnode;
    prevnode=0;
    currentnode=nextnode=head;
    while(nextnode!=0){
        nextnode=nextnode->next;
        currentnode->next=prevnode;
        prevnode=currentnode;
        currentnode=nextnode;
    }
}
int main(){
    struct node*head=0;
    struct node*nnode,*temp;
    int choice;
    while(choice=1){
    nnode=(struct node*)malloc(sizeof(struct node));
    printf("enter the data");
    scanf("%d",&nnode->data);
    nnode->next=0;
    if(head==0){
        head=temp=nnode;
    }
    else{
        temp->next=nnode;
        temp=nnode;
    }
    printf("do u want to continue yes or no");
    scanf("%d",&choice);
    }
    temp=head;
    while(temp!=0){
        printf("%d",temp->data);
        temp=temp->next;
    }
    reverse();
    while(temp!=0){
        printf("%d",temp->data);
        temp=temp->next;
    }
    }
